cbind(patients,my_matrix)
my_data <- data.frame((patients, my_matrix))
my_data <- data.frame((patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
x <- c(4, "a", TRUE)
class(x)
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
x <- c(17, 14, 4, 5, 13, 12, 10)
read.csv("/home/shubhra/Documents/AllCodeBase/Coursera:RProgramming/Week1/quiz1_data/hw1_data.csv")
weather <- read.csv("/home/shubhra/Documents/AllCodeBase/Coursera:RProgramming/Week1/quiz1_data/hw1_data.csv")
shape(weather)
dim(weather)
row.names.data.frame(weather)
colnames(weather)
weather[2,]
weather[1:2,]
dim(weather)
length(weather)
dim(weather),1
dim(weather)[1]
weather[c(152:153),]
weather[47,]
sum[weather[is.na["Ozone"]]]
weather[is.na("Ozone")]
sum(is.na(weather["Ozone"]))
?mean
mean(weather["Ozone"], na.rm = TRUE)
mean(is.na(weather["Ozone"]), na.rm = TRUE)
is.na(weather["Ozone"])
mean(weather[is.na(weather["Ozone"])], na.rm = TRUE)
Ozone <- weather["Ozone"]
nonna_ozone <- Ozone[!is.na(Ozone)]
mean(nonna_ozone)
q_19 <- weather[Ozone >31 & Temp >90]
q_19 <- weather["Ozone" >31 & "Temp" >90]
q_19
q_19["Solar.R"]
q_19["Solar.R"]
q_19 <- weather[Ozone >31 ]
q_19 <- weather[Temo >31 ]
q_19
colnames(q_19)
colnames[q_19] <- colnames(weather)
colnames[q_19] <- col.names(weather)
col.names[q_19] <- col.names(weather)
col.names[q_19] <- colnames(weather)
class(q_19)
class(weather)
q_19 <- as.data.frame(weather[Ozone >31 & Temp > 90])
q_19 <- as.data.frame(weather[which(Ozone >31 & Temp > 90)])
q_19 <- subset(weather, Ozone>31 & Temo>90)
q_19 <- subset(weather, Ozone>31 & Temp>90)
q_19
mean(q_19["Solar.R"])
q_19["Solar.R"]
mean(as.vector(q_19["Solar.R"]))
colMeans(q_19, na.rm = TRUE, dims = 1)
q_19 = subset(weather, Month==6)
q_19
colMeans(q_19, na.rm = True, dim =1)
colMeans(q_19, na.rm = TRUE, dim =1)
colMeans(q_19, na.rm = TRUE, dim =2)
q_19 <- subset(weather, Month= 5)
q_19
q_19 <- subset(weather, Month == 5)
q_19
colMaxs(q_19)
sort(weather["Temp"])
?sort
sort(q_19, decreasing = TRUE)
sort(q_19["Temp"], decreasing = TRUE)
q_19[order[q_19$Temp]]
q_19[order(q_19$Temp)]
q_19[order(q_19$Temp),]
q_19[order(q_19$Ozone),]
x <- 1:10
if(x > 5) {
x <- 0
}
x <- Sys.getenv()
x
Sys.getenv()
x <- Sys.time()
x
as.POSIXct.date(x)
as.POSIXct(x)
as.POSIXlt(x)
x
unclass(s)
unclass(x)
names(p)
names(x)
names(unclass(x))
y <- as.POSIXlt(x)
names(unclass(y))
names(y)
unclass(y)
y["sec"]
y$sec
y[sec]
weather <- read.csv("/home/shubhra/Documents/AllCodeBase/Coursera:RProgramming/Week1/quiz1_data/hw1_data.csv")
colnames(weather)
head(weather,2)
#q13 num of observations
dim(weather)
#q13 num of observations
[dim(weather),1]
#q13 num of observations
dim(weather,1)
#q13 num of observations
dim(weather)
head(weather, -2)
weather[152:153,]
weather[47, "Ozone"]
sum(is.na(weather[,"Ozone"]))
mean(!is.na(weather[,"OZone"]))
mean(!is.na(weather[,"Ozone"]))
mean(weather[!is.na(weather[,"Ozone"])])
weather$Ozone
!is.na(weather$Ozone)
weather[!is.na(weather$Ozone)]
ozone <- weather[,"Ozone"]
ozone <- ozone[!is.na(ozone)]
ozone <- weather[,"Ozone"]
mean(ozone, na.rm = TRUE)
subset_q19 <- subset(weather, Ozone>31 & Temp>90)
colMeans(subset_q19, na.rm = TRUE)
colMeans(ubset(weather, Ozone>31 & Temp>90), na.rm = TRUE) # Solar.R mean = 212.8
colMeans(subset(weather, Ozone>31 & Temp>90), na.rm = TRUE) # Solar.R mean = 212.8
colMeans(subset(weather, Ozone>31 & Temp>90), na.rm = TRUE) # Solar.R mean = 212.8
#q19What is the mean of "Temp" when "Month" is equal to 6
colMeans(subset(weather, Month==6), na.rm = TRUE) # Solar.R mean = 212.8
q_20 = subset(weather, Month==5)
q_20[order(q_20$Ozone)]
q_20[order(q_20$Ozone),]
class(c(4, TRUE))
x <- c(4, TRUE)
class(x)
x <- c(3, 5, 1, 10, 12, 6)
x[x %in% 1:5] <- 0
x
x <- c(1,3, 5)
x <- c(1,3, 5)
y <- c(3, 2, 10)
z<- cbind(x,y)
z
library(swirl)
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 ==7
6<7
10 <= 10
5 != 7
!
(5 != 7)
!(5 ==7)
FALSE & FALSE
TREU & C(TRUE, FALSE, FALSE)
TRUE & C(TRUE, FALSE, FALSE)
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE( 6>4)
identical('twins', "twins")
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints>5
which(ints >7)
any(ints <0)
all(ints >0)
Sys.Date()
mean(c(2,4,5))
source('/tmp/RtmpNNDEKv/boring_function.R')
submit()
boring_function("My first function!")
boring_function
source('/tmp/RtmpNNDEKv/my_mean.R')
submit()
my_mean(c(4,5,10))
source('/tmp/RtmpNNDEKv/remainder.R')
submit()
remainder(5)
remainder(11,5)
remainder(diviror =11,num =5)
remainder(divisor =11,num =5)
remainder(4, div=2)
args(remainder)
source('/tmp/RtmpNNDEKv/evaluate.R')
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
evaluate(stdev, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate (function(x){x[1]}, c(8,4,0))
evaluate (function(x){tail(x,1)}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
source('/tmp/RtmpNNDEKv/telegram.R')
SUBMIT()
submit()
telegram("trwee", "Iskwwhjdhjsdhs", "bsajhsajdhs")
source('/tmp/RtmpNNDEKv/mad_libs.R')
submit()
mad_libs(place = "Venice", adjective = "nagr", noun = "chair")
source('/tmp/RtmpNNDEKv/bin_op.R')
submit()
'I' %p% 'love'%p% 'R!'
bye()
bye()
swirl()
d1 <- Sys.Date()
class(d1)
unclas(d1)
unclass(d1)
d1
?unclass
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
d1
class(t1)
t1
unclass(t1)
t1 <- as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
weekdays(t1)
t1 <- Sys.time()
weekdays(t1)
months(t1)
quart
quarters(t2)
t3 <- "October
| 37, 1986 08:24"
t3 <- "October     17, 1986 08:24"
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4<-strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() >t1
Sys.time() -t1
difftime(Sys.time(), t1, units = "day")
difftime(Sys.time(), t1, units = "days")
x <- matrix(rnorm(20), 2, 10)
x
apply(x,1, mean)
apply(x,2, mean)
apply(x,3, mean)
x <- (1:6, 2,3)
x <- (c(1:6), 2,3)
x <- matrix(c(1:6), 2,3)
x
apply(x,2,sum)
apply(x,1,sum)
?gl
gl(3,1)
gl(5,"F")
gl(3,10)
gl(4,2)
gl(4,2, labels = seq_along("M", "F"))
gl(4,2, labels = rep("M", "F"))
gl(4,2, labels = rep(c("M", "F")))
x <-data.frame(a = 1:3, b = LETTERS)
x <-data.frame(a = 1:26, b = LETTERS)
X
x
f  <- gl(1:26, 1)
f  <- gl(26, 1)
f
tapply(x, f, mean)
?invisible
library(datasets)
data(iris)
?iris
head(iris)
sample(iris, 10)
sample(iris, 100)
rownames(iris)
colnames(iris)
s <- split(iris, iris$Species)
s
sapply (s, colMeans(s, na.rm= TRUE))
sapply (s, function(x){colMeans(s, na.rm= TRUE)})
sapply (s, function(x){colMeans(s[,c("Sepal.Length")], na.rm= TRUE)})
sapply (s, function(x){colMeans(x[,c("Sepal.Length")], na.rm= TRUE)})
sapply (s, function(x) colMeans(x[,c("Sepal.Length")], na.rm= TRUE))
sapply (s, function(x){colMeans(x[,c("Sepal.Length")], na.rm= TRUE)})
x
exit
sapply (s, function(x){colMeans(x[,c("Sepal.Length")], na.rm= TRUE)})
s
View(s)
lapply(s, function(s) colMeans(s[,"Sepal.Length"]))
s[, "Sepal.Length"]
s[, c("Sepal.Length")]
s
class(s)
s$setosa
s$virginica
colMeans(s$virginica, na.rm = TRUE)
colMeans(s$virginica[,"Sepal.Length"], na.rm = TRUE)
class(s$virginica)
s$virginica[, "Sepal.Width"]
class(s$virginica[, "Sepal.Width"])
colMeans(s$virginica[,"Sepal.Length"], na.rm = TRUE)
colMeans(s$virginica[,c("Sepal.Length", "Petal.Length")], na.rm = TRUE)
sapply(s, function(x) colMeans(s[,c("Sepal.Length", "Petal.Length")]))
sapply(s, function(x) colMeans(x[,c("Sepal.Length", "Petal.Length")]))
source('~/Documents/AllCodeBase/Coursera:RProgramming/Week3/Quiz.R')
##setosa versicolor virginica
##Sepal.Length  5.006      5.936     6.588
##Petal.Length  1.462      4.260     5.552
source('~/Documents/AllCodeBase/Coursera:RProgramming/Week3/Quiz.R')
split(iris, iris$Species)
sapply(s, function(x) colMeans(x[,c("Sepal.Length", "Petal.Length")]))
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
s <- split(mtcars, mtcars$cyl)
s
apply(s, colmeans([, 2:3], na.rm = TRUE))
apply(s, function(x) colmeans(x[, 2:3], na.rm = TRUE))
sapply(s, function(x) colMeans(x[, 2:3], na.rm = TRUE))
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$cyl, mtcars$mpg, mean)
source('~/Documents/AllCodeBase/Coursera:RProgramming/Week3/Quiz.R')
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429-82.63636
debug (ls)
ls
source('~/Documents/AllCodeBase/Coursera:RProgramming/Week3/Quiz.R')
sapply(iris$Species, iris$Sepal.Length, mean)
tapply(iris$Species, iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
source('~/Documents/AllCodeBase/Coursera:RProgramming/Week3/Quiz.R')
library(swirl)
swirl()
str(flags)
summary(flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vsapply(flags, class, character(1))
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
Name <- c("John", "Anne", "Clark", "Tim", "Mary")
Age <- c(25, 20,25,25, 15)
School <- c("STM", "CODC", "GCC", "BBC", "CBIC")
df <- data.frame(Name = Name, Age= Age, School = School)
df
df[df$Age]
df[df$Age,]
df$Age
df[df$Age %in% c(20, 25),]
df[df["Age"] == c(20, 25)]
df[df$["Age"] %in% c(20, 25),]
df[df["Age"] %in% c(20, 25),]
df[df[Age] %in% c(20, 25),]
df[df[[Age] %in% c(20, 25),]
df[df[[Age]] %in% c(20, 25),]
df[Age]
df["Age"]
df[Name, df$Age %in% c(20, 25),]
df[df$Name, df$Age %in% c(20, 25),]
df[Name, df$Age %in% c(20, 25)]
df$Name[ df$Age %in% c(20, 25),]
df$Name[ df$Age %in% c(20, 25)]
getwd()
list.dirs()
dir.exists("Documents/")
dir.exists("sm")
file.exists("Documents/")
file.exists("Documents/po")
file.exists("Screenshot from 2018-10-17 11-39-53.png")
dir.exists("Screenshot from 2018-10-17 11-39-53.png")
file.exists("Documents")
cls
clear()
cls
file_url <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
df <- download.file(file_url)
getwd()
setwd("./Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/")
getwd()
file_url <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
download.file(file_url, "./testfile1.csv", method = "curl")
download.file(file_url, "./testfile1.csv", method = "curl")
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
library("downloads")
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
download.file(file_url, destfile = "file1.csv", method = "curl")
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
list.files()
date()
z <- "kdksd" + date()
z <- "kdksd" + toString(date())
z
z <- paste("sndnsn", toString(date()), sep = "-")
z
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
list.files()
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
file_url <- "https://data.baltimorecity.gov/api/views/dz54-2aru/rows.csv?accessType=DOWNLOAD"
filename <- paste("cameras", toString(date()), ".csv", sep = "")
download.file(file_url, destfile = filename, method = "curl")
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
download.file(file_url, destfile = paste("./data/",filename, ".csv", sep = ""), method = "curl")
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
download.file(file_url, destfile = paste("data/",filename, ".csv", sep = ""), method = "curl")
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
dir.create("./data")
{
dir.create("./data")
}
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
fullfilepath
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
camera_data <- read.csv(fullfilepath)
View(camera_data)
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
View(camera_data)
View(camera_data)
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
View(camera_data_table)
View(camera_data_table)
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
head(camera_data_table)
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
download.file("https://hgn-rest.scm.azurewebsites.net/api/vfs/LogFiles/archive/", destfile = "sooo.zip", method = "curl")
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
install.packages("xml")
install.packages("XML")
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/downloads.R')
file_url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/Week1Quiz.R')
q1_data.head()
View(q1_data)
is.data.frame(q1_data)
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/Week1Quiz.R')
q1
q1()
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/Week1Quiz.R')
q1()
q1_data[q1_data$ADJUST >= 1000000]
q1_data[q1_data$ADJUST > 1000000]
q1_data[q1_data$ADJUST > 1000000,]
length(q1_data[q1_data$ADJUST > 1000000,])
length(q1_data[q1_data$ADJUST >= 1000000,])
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/Week1Quiz.R')
q1()
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/Week1Quiz.R')
q1_data[, FES]
q1_data[, "FES"]
q1_data["FES"]
q1_data["FES"].unique()
unique(q1_data["FES"])
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/Week1Quiz.R')
q2()
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/Week1Quiz.R')
install.packages("xlsx")
source('~/Documents/AllCodeBase/Coursera/Coursera:Data Science Specialization-JohnHopkinsUniversity/Course3: Getting And Cleaning Data/Week1/Week1Quiz.R')
